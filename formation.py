__author__ = 'brandon_corfman'
from globalconst import BLACK, MAN
from csp import different_values_constraint, CSP, parse_neighbors

# other squares reachable from a particular square with a black man
BLACK_MAP = {45: {45,39,40,34,35,28,29,30,23,24,25,17,18,19,20,12,13,14,15,6,7,8,9},
             46: {46,40,41,34,35,36,28,29,30,31,23,24,25,26,17,18,19,20,12,13,14,15,6,7,8,9},
             47: {47,41,42,35,36,37,29,30,31,23,24,25,26,17,18,19,20,12,13,14,15,6,7,8,9},
             48: {48,42,36,37,30,31,24,25,26,18,19,20,12,13,14,15,6,7,8,9},
             39: {39,34,28,29,23,24,17,18,19,12,13,14,6,7,8,9},
             40: {40,34,35,28,29,30,23,24,25,17,18,19,20,12,13,14,15,6,7,8,9},
             41: {41,35,36,29,30,31,23,24,25,26,17,18,19,20,12,13,14,15,6,7,8,9},
             42: {42,36,37,30,31,24,25,26,18,19,20,12,13,14,15,6,7,8,9},
             34: {34,28,29,23,24,17,18,19,12,13,14,6,7,8,9},
             35: {35,29,30,23,24,25,17,18,19,20,12,13,14,15,6,7,8,9},
             36: {36,30,31,24,25,26,18,19,20,12,13,14,15,6,7,8,9},
             37: {37,31,25,26,19,20,13,14,15,7,8,9},
             28: {28,23,17,18,12,13,6,7,8},
             29: {29,23,24,17,18,19,12,13,14,6,7,8,9},
             30: {30,24,25,18,19,20,12,13,14,15,6,7,8,9},
             31: {31,25,26,19,20,13,14,15,7,8,9},
             23: {23,17,18,12,13,6,7,8},
             24: {24,18,19,12,13,14,6,7,8,9},
             25: {25,19,20,13,14,15,7,8,9},
             26: {26,20,14,15,8,9},
             17: {17,12,6,7},
             18: {18,12,13,6,7,8},
             19: {19,13,14,7,8,9},
             20: {20,14,15,8,9},
             12: {12,6,7},
             13: {13,7,8},
             14: {14,8,9},
             15: {15,9},
             6: {6},
             7: {7},
             8: {8},
             9: {9} }

# other squares reachable from a particular square with a white man
WHITE_MAP = {6: {6,12,17,18,23,24,28,29,30,34,35,36,39,40,41,42,45,46,47,48},
             7: {7,12,13,17,18,19,23,24,25,28,29,30,31,34,35,36,37,39,40,41,42,45,46,47,48},
             8: {8,13,14,18,19,20,23,24,25,26,28,29,30,31,34,35,36,37,39,40,41,42,45,46,47,48},
             9: {9,14,15,19,20,24,25,26,29,30,31,34,35,36,37,39,40,41,42,45,46,47,48},
             12: {12,17,18,23,24,28,29,30,34,35,36,39,40,41,42,45,46,47,48},
             13: {13,18,19,23,24,25,28,29,30,31,34,35,36,37,39,40,41,42,45,46,47,48},
             14: {14,19,20,24,25,26,29,30,31,34,35,36,37,39,40,41,42,45,46,47,48},
             15: {15,20,25,26,30,31,35,36,37,40,41,42,45,46,47,48},
             17: {17,23,28,29,34,35,39,40,41,45,46,47},
             18: {18,23,24,28,29,30,34,35,36,39,40,41,42,45,46,47,48},
             19: {19,24,25,29,30,31,34,35,36,37,39,40,41,42,45,46,47,48},
             20: {20,25,26,30,31,35,36,37,40,41,42,45,46,47,48},
             23: {23,28,29,34,35,39,40,41,45,46,47},
             24: {24,29,30,34,35,36,39,40,41,42,45,46,47,48},
             25: {25,30,31,35,36,37,40,41,42,45,46,47,48},
             26: {26,31,36,37,41,42,46,47,48},
             28: {28,34,39,40,45,46},
             29: {29,34,35,39,40,41,45,46,47},
             30: {30,35,36,40,41,42,45,46,47,48},
             31: {31,36,37,41,42,46,47,48},
             34: {34,39,40,45,46},
             35: {35,40,41,45,46,47},
             36: {36,41,42,46,47,48},
             37: {37,42,47,48},
             39: {39,45},
             40: {40,45,46},
             41: {41,46,47},
             42: {42,47,48},
             45: {45},
             46: {46},
             47: {47},
             48: {48}}

NEIGHBOR_SQUARES = "6: 12; 7: 12 13; 8: 13 14; 9: 14 15; " \
                   "12: 6 7 17 18; 13: 7 8 18 19; 14: 8 9 19 20; 15: 9 20;" \
                   "17: 12 23; 18: 12 13 23 24; 19: 13 14 24 25; 20: 14 15 25 26;" \
                   "28: 23 34; 29: 23 24 34 35; 30: 24 25 35 36; 31: 25 26 36 37;" \
                   "34: 28 29 39 40; 35: 29 30 40 41; 36: 30 31 41 42; 37: 31 42;" \
                   "39: 34 45; 40: 34 35 45 46; 41: 35 36 46 47; 42: 36 37 47 48;" \
                   "45: 39 40; 46: 40 41; 47: 41 42; 48: 42"


def formation_csp(formation, board):
    """Return an instance of the CSP to see if the formation can be obtained."""
    domains = {}
    player = board.to_move
    pos_map = BLACK_MAP if player == BLACK else WHITE_MAP
    neighbors = {}
    for f in formation:
        domains[f] = [pos for pos in pos_map[f] if board.squares[pos] == player + MAN]
        neighbors[f] = set(formation) - {f}
    return CSP(formation, domains, neighbors, different_values_constraint)



